What is Angular? Why was it introduced?
	>> Angular was introduced to create Single Page applications. 
	>> This framework brings structure and consistency to web applications and provides excellent scalability and maintainability. 
	>> Angular is an open-source, JavaScript framework wholly written in TypeScript. 
	>> It uses HTML's syntax to express your application's components clearly.

What is TypeScript?
	>> TypeScript is a superset of JavaScript that offers excellent consistency. 
	>> It is highly recommended, as it provides some syntactic sugar and makes the code base more comfortable to understand and maintain. 
	>> Ultimately, TypeScript code compiles down to JavaScript that can run efficiently in any environment. 

What is data binding? Which type of data binding does Angular deploy?
	>> Data binding is a phenomenon that allows any internet user to manipulate Web page elements using a Web browser. 
	>> It uses dynamic HTML and does not require complex scripting or programming. 
	>> We use data binding in web pages that contain interactive components such as forms, calculators, tutorials, and games. 
	>> Incremental display of a webpage makes data binding convenient when pages have an enormous amount of data. 

	>> Angular uses the two-way binding. 
	>> Any changes made to the user interface are reflected in the corresponding model state. 
	>> Conversely, any changes in the model state are reflected in the UI state. 
	>> This allows the framework to connect the DOM to the Model data via the controller. 
	>> However, this approach affects performance since every change in the DOM has to be tracked

What are decorators in Angular? 
	>> Decorators are a design pattern or functions that define how Angular features work. They are used to make prior modifications to a class, service, or filter. 
	>> Angular supports four types of decorators, they are:

	Class Decorators
	Property Decorators
	Method Decorators
	Parameter Decorators

Mention some advantages of Angular.
	Some of the common advantages of Angular are - 

	>> MVC architecture - 
		>> Angular is a full-fledged MVC framework. 
		>> It provides a firm opinion on how the application should be structured. 
		>> It also offers bi-directional data flow and updates the real DOM. 
	>> Modules: 
		>>Angular consists of different design patterns like components, directives, pipes, and services, which help in the smooth creation of applications.
	>> Dependency injection: 
		>> Components dependent on other components can be easily worked around using this feature. 
	>> Other generic advantages include clean and maintainable code, unit testing, reusable components, data binding, and excellent responsive experience.

What are the new updates with Angular10? 
	>> Older versions of TypeScript not supported - 
		Previous versions of Angular supported typescript 3.6, 3.7, and even 3.8. But with Angular 10, TypeScript bumped to TypeScript 3.9.
	>> Warnings about CommonJS imports - 
		Logging of unknown property bindings or element names in templates is increased to the "error" level, which was previously a "warning" before.
	>> Optional strict setting - Version 10 offers a stricter project setup when you create a new workspace with ng new command.
		ng new --strict
	>> NGCC Feature - Addition of NGCC features with a program based entry point finder. 

	>> Updated URL routing
	>> Deprecated APIs - 
		Angular 10 has several deprecated APIs.
	>> Bug fixes - 
		With this Angular 10 version, there have been a number of bug fixes, important ones being the compiler avoiding undefined expressions and the core avoiding a migration error when a nonexistent symbol is imported.
	>> New Default Browser Configuration - 
		Browser configuration for new projects has been upgraded to outdo older and less used browsers. 

Templates in Angular?
	>> Angular Templates are written with HTML that contains Angular-specific elements and attributes. 
	>> In combination with the model and controller's information, these templates are further rendered to provide a dynamic view to the user.

Directives in Angular?
	>> Directives are attributes that allow the user to write new HTML syntax specific to their applications. 
	>> They execute whenever the Angular compiler finds them in the DOM. Angular supports three types of directives.  

	Component Directives
	Structural Directives
	Attribute Directives 

What is an AOT compilation? What are its advantages?
	>> The Ahead-of-time (AOT) compiler converts the Angular HTML and TypeScript code into JavaScript code during the build phase, 
		i.e., before the browser downloads and runs the code.

	Some of its advantages are as follows. 
		>> Faster rendering
		>> Fewer asynchronous requests
		>> Smaller Angular framework download size
		>> Quick detection of template errors
		>> Better security

What are Components in Angular?
	>> Components are the basic building blocks of the user interface in an Angular application. 
	>> Every component is associated with a template and is a subset of directives. 
	>> An Angular application typically consists of a root component, which is the AppComponent, that then branches out into other components creating a hierarchy.

Pipes in Angular? 
	>> Pipes are simple functions designed to accept an input value, process, and return as an output, 
	>> a transformed value in a more technical understanding. 
	>> Angular supports several built-in pipes. 
	>> However, you can also create custom pipes that cater to your needs. 

PipeTransform interface?
	import { Pipe, PipeTransform } from '@angular/core';
	 @Pipe({
	  name: 'demopipe'
	})
	export class DemopipePipe implements PipeTransform {
	  transform(value: unknown, ...args: unknown[]): unknown {
	    return null;
	  }
	}

What are Pure Pipes? 
	>> As a result of this, a pure pipe doesn't use any internal state, and the output remains the same as long as the parameters passed stay the same. 
	>> Angular calls the pipe only when it detects a change in the parameters being passed. 
	>> A single instance of the pure pipe is used throughout all components. 

What are Impure Pipes?
	>> For every change detection cycle in Angular, an impure pipe is called regardless of the change in the input fields. 
	>> Multiple pipe instances are created for these pipes. 
	>> Inputs passed to these pipes can be mutable. 

ngModule?
	>> NgModules are containers that reserve a block of code to an application domain or a workflow. 
	>> @NgModule takes a metadata object that generally describes the way to compile the template of a component and to generate an injector at runtime. 
	>> In addition, it identifies the module's components, directives, and pipes, making some of them public, through the export property so that external components can use them.

filters in Angular? Name a few of them.
	>> Filters are used to format an expression and present it to the user. 
	>> They can be used in view templates, controllers, or services. Some inbuilt filters are as follows. 

	date - Format a date to a specified format.
	filter - Select a subset of items from an array.
	Json - Format an object to a JSON string.
	limitTo -  Limits an array/string, into a specified number of elements/characters.
	lowercase - Format a string to lowercase.

view encapsulation in Angular?
	>> View encapsulation defines whether the template and styles defined within the component can affect the whole application or vice versa. 
	>> Angular provides three encapsulation strategies:
		Emulated - styles from the main HTML propagate to the component.
		Native - styles from the main HTML do not propagate to the component. 
		None - styles from the component propagate back to the main HTML and therefore are visible to all components on the page.

lifecycle hooks in Angular
	>> In Angular, every component has a lifecycle. 
	>> Angular creates and renders these components and also destroys them before removing them from the DOM. 
	>> This is achieved with the help of lifecycle hooks. 

	Here's the list of them - 
	>> ngOnChanges() - 
		Responds when Angular sets/resets data-bound input properties.
	>> ngOnInit() - 
		Initialize the directive/component after Angular first displays the data-bound properties and sets the directive/>> component's input  properties/
	>> ngDoCheck() - 
		Detect and act upon changes that Angular can't or won't detect on its own.
	>> ngAfterContentInit() - 
		Responds after Angular projects external content into the component's view.
	>> ngAfterContentChecked() - 
		Respond after Angular checks the content projected into the component.
	>> ngAfterViewInit() - 
		Respond after Angular initializes the component's views and child views.
	>> ngAfterViewChecked() - 
		Respond after Angular checks the component's views and child views.
	>> ngOnDestroy - Cleanup 
		just before Angular destroys the directive/component

String Interpolation in Angular?
	>> String Interpolation is a one-way data-binding technique that outputs the data from TypeScript code to HTML view. 
	>> It is denoted using double curly braces. 
	>> This template expression helps display the data from the component to the view. 

	{{ data }}

Template statements?
	>> Template statements are properties or methods used in HTML for responding to user events.

Difference between AOT and JIT? 
	>> Ahead of Time (AOT) compilation converts your code during the build time before the browser downloads and runs that code. 
	>> This ensures faster rendering to the browser. 
	>> To specify AOT compilation, include the --aot option with the ng build or ng serve command. 

	>> The Just-in-Time (JIT) compilation process is a way of compiling computer code to machine code during execution or run time. 
	>> It is also known as dynamic compilation. 
	>> JIT compilation is the default when you run the ng build or ng serve CLI commands. 

@Component Decorator.
	>> TypeScript class is one that is used to create components. 
	>> This genre of class is then decorated with the "@Component" decorator. 
	>> The decorato’s purpose is to accept a metadata object that provides relevant information about the component. 

Services in Angular? 
	>> Angular Services perform tasks that are used by multiple components. 
	>> These tasks could be data and image fetching, network connections, and database management among others. 
	>> They perform all the operational tasks for the components and avoid rewriting of code. 
	>> A service can be written once and injected into all the components that use that service. 

Promises and Observables in Angular? 
	>> While both the concepts deal with Asynchronous events in Angular, 
	>> Promises handle one such event at a time 
	>> while observables handle a sequence of events over some time. 

	Promises - 
		>> They emit a single value at a time. 
		>> They execute immediately after creation and are not cancellable. 
		>> They are Push errors to the child promises. 

	Observables - 
		>> They are only executed when subscribed to them using the subscribe() method. 
		>> They emit multiple values over a period of time. 
		>> They help perform operations like forEach, filter, and retry, among others. 
		>> They deliver errors to the subscribers. 
		>> When the unsubscribe() method is called, the listener stops receiving further values.

Eager and Lazy loading? 
	>> Eager loading is the default module-loading strategy. 
	>> Feature modules under Eager loading are loaded before the application starts. 
	>> This is typically used for small size applications.

	>> Lazy loading dynamically loads the feature modules when there's a demand. 
	>> This makes the application faster. 
	>> It is used for bigger applications where all the modules are not required at the start of the application. 

Type of DOM does Angular implement? 
	>> DOM (Document Object Model) treats an XML or HTML document as a tree structure in which each node is an object representing a part of the document. 
	
	>> Angular uses the regular DOM. 
	>> This updates the entire tree structure of HTML tags until it reaches the data to be updated. 
	>> However, to ensure that the speed and performance are not affected, Angular implements Change Detection.

