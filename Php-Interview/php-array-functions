Array Functions

array() - Creates an array
array_chunk() - Splits an array into chunks of arrays
array_combine() - Creates an array by using the elements from one "keys" array and one "values" array
array_merge()	Merges one or more arrays into one array
array_count_values() - Counts all the values of an array
array_diff()	Compare arrays, and returns the differences (compare values only)
array_fill()	Fills an array with values
array_filter()	Filters the values of an array using a callback function
array_key_exists()	Checks if the specified key exists in the array
array_keys()	Returns all the keys of an array
array_map()	Sends each value of an array to a user-made function, which returns new values
array_multisort()	Sorts multiple or multi-dimensional arrays
array_pop()	Deletes the last element of an array
array_push()	Inserts one or more elements to the end of an array
array_replace()	Replaces the values of the first array with the values from following arrays
array_reverse()	Returns an array in the reverse order
array_search()	Searches an array for a given value and returns the key
array_shift()	Removes the first element from an array, and returns the value of the removed element
array_slice()	Returns selected parts of an array
array_sum()	Returns the sum of the values in an array
array_unique()	Removes duplicate values from an array
array_unshift()	Adds one or more elements to the beginning of an array


sort()	Sorts an indexed array in ascending order
rsort()	Sorts an indexed array in descending order
asort()	Sorts an associative array in ascending order, according to the value
arsort()	Sorts an associative array in descending order, according to the value
ksort()	Sorts an associative array in ascending order, according to the key
krsort()	Sorts an associative array in descending order, according to the key
uasort()	Sorts an array by values using a user-defined comparison function and maintains the index association
uksort()	Sorts an array by keys using a user-defined comparison function
usort()	Sorts an array by values using a user-defined comparison function